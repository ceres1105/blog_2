[{"body":" hugo는 Go 언어로 만들어진 정적 사이트 생성기이다. 빌드시간이 빠르고 안정적인 특징을 갖고 있다.\n Hugo 블로그 만들기 Hugo 공식문서의 Quick Start를 참조하였다.\n1. Hugo 설치하기 사용하는 OS 마다 설치 코드가 다르다. 설치는 이곳을 참조하였다.\n// ubutu 환경 sudo apt-get install hugo 설치 후에는 설치가 잘 되어있는지 확인한다. 아래의 코드를 입력했을 때 version 정보가 나오면 설치가 된 것이다.\nhugo version (Mac은 brew install hugo 명령어로 설치하면 된다. 당연히 brew가 미리 설치되어있어야 한다.)\n2. Hugo Site 만들기 clone 받은 github repo이름은 hugo_blog, 생성할 저장소 이름은 ceres_blog로 가정하겠다.\n 먼저 clone 받은 hugo_blog로 이동한다.  cd hugo_blog hugo site를 제작한다. ceres_blog 저장소가 생성되고 그 내부에 hugo site의 컨텐츠들이 생성된것을 볼 수 있다.  hugo new site ceres_blog site가 만들어지면 아래와 같은 congratulations 메세지를 볼 수 있다.\n3. github repository와 연결 github repository를 먼저 생성한 후 reomote로 등록한다. git remote add origin 레포지토리 주소 명령어를 사용한다.\ngit init git remote add origin https://github.com/ceres1105/blog_2 cf) repository를 생성한 후 git clone 레포지토리 주소 명령어로 clone 받고, clone 받은 디렉토리에서 2번 과정 (Hugo Site 만들기)를 진행해도 된다. 이 경우에는 remote로 따로 등록을 하지 않아도 된다.\n4. 테마 설치하기 테마는 이곳에서 선택하면 된다. 각 테마마다 설치방법이 약간씩 다를 수 있다. 각 테마의 github page나 공식문서를 참조하길 바란다.\n나는 Docsy 테마를 선택했다. hugo 공식사이트에 예로 나오는 테마는 ananke 이다.\nhugo 사이트를 처음 만들어 본다면 우선 ananke 테마로 만드는 것을 추천한다. hugo 공식문서 quick start만 그대로 따라하면 화면이 잘 나올 것이다.\n만약 Docsy 테마를 사용할 예정이라면 docsy theme에 대해 작성한 글에서 설치부분을 참고하여 설치하는 걸 추천한다.\n  hugo site 디렉토리로 이동 cd ceres_blog\n  git 초기화 git init\n  선택한 hugo 테마 github 주소 복사 테마의 css를 수정하고 싶다면 테마의 github 주소를 folk한 다음 fork 한 주소를 사용해야한다.\n  submodule로 테마 추가 테마를 clone 해서 사용해도 된다. submodule을 사용하는 이유는 엡데이트 된 테마를 쉽게 가지고 올 수 있기 때문이다. git submodule add 깃헙주소 themes/테마이름\n  config.toml 파일에 테마 내용 추가 theme = \"테마이름\"' \u003e\u003e config.toml\n  로컬로 구축시 필요한 코드 추가 git submodule update --init --recursive\n  코드를 정리하면 아래와 같다.\ncd ceres_blog git init git submodule add https://github.com/ceres1105/docsy.git themes/ananke echo 'theme = \"ananke\"' \u003e\u003e config.toml git submodule update --init --recursive 5. Contents 만들기 hugo new 폴더이름/파일이름.md 명령어를 입력하면 content 폴더 하위에 폴더가 생성되고 그 하위에 파일이 생성된다.\n이 명령어는 config.toml이 있는 root directory에서 입력해야 한다. 여기에선 cd ceres_blog 상태에서 작성하면 된다.\n아래 코드를 작성하면 content 폴더안에\u003e ko 폴더가 생성된고\u003e 그 안에 Hugo 폴더\u003e 그 안에 start_hugo 라는 md 파일이 생성된다.\n만약 ko, Hugo 폴더가 있다면 start_hugo 파일만 생성된다.\nhugo new ko/Hugo/start_hugo.md 만들어진 폴더에 들어가면 나오는 default 내용이다. 이것을 front matter 라고 한다.\n제목, 날짜 등으로 본문 내용에는 영향을 주지 않는다. front matter 아래에 마크다운으로 본문 내용을 작성하면 된다.\n--- title: \"start_hugo\" date: 2019-03-26T08:47:11+01:00 draft: true ---   title은 제목, date는 날짜이다.\n  draft는 surver를 연결했을때 화면에서 보여주는 것을 결정한다. draft:true 인 경우 서버를 켜도 해당 페이지는 보이지 않는다.\n  미완성인 페이지나 보여주고 싶지 않은 페이지는 이 코드를 넣으면 된다.   default 내용 바꾸는 방법: archetypes\nroot directory 안 (ceres_blog 폴더 내부)\u003e archetypes 폴더에 \u003e default.md 파일이 있다.\n그곳에다 hugo new 폴더이름/파일이름 명령어를 작성했을때 만들어지는 default 내용을 수정 할 수 있다.\n만약 archetype 폴더나 default.md 파일이 없다면 똑같은 이름으로 만들어주면 된다.\n  6. Hugo Server 시작 (로컬서버 연결하기) hugo server -D 를 입력하고 http://localhost:1313/ 이 주소로 들어가서 내용이 잘 작성되었는지 확인하면 된다.\n D 는 draft:true인 항목 (=모든 항목)을 로컬서버에서 보여준다는 뜻이다. D 가 없이 hugo server 명령어만 입력하면 draft: false인 항목만 로컬서버에서 보여준다.  //server에 연결이 될 때 터미널에 나오는 화면이다. ▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 7. 사이트 구성 config.toml 파일을 열면 보이는 화면이다.\nbaseURL = \"https://ceres1105.github.io/blog_2/\" languageCode = \"en-us\" title = \"ceres_blog\" theme = \"docsy\" title을 설정해준다. baseURL은 URL 주소가 있으면 입력하고 로컬로만 사용하면 바꾸지 않아도 된다.\n나는 github page 주소를 넣었다.\nconfig.toml 에는 계속해서 넣을 내용이 생길 것이다.\n8. Build 간단하다. hugo -D 명령어만 입력해주면 된다. build 결과는 public directory에 생성된다.\n주의! 만약 github action을 사용해서 build 할 것이라면 이 과정을 하지 않아야 한다.\n만약 hugo -D명령어로 build 했다면 github action 전에 public 폴더를 지워야 한다.\n그렇지 않으면 변경한 내용이 deploy 에 반영되지 않을 것이다.\n(경험담이다..분명 css와 layout을 변경했는데 배포된 페이지를 보면 전혀 반영이 되어있지 않아 삽질을 했다..public 폴더를 지우니 바로 반영이 되는 걸 볼 수 있었다.)\n다음 포스팅에는 github action을 사용하여 github page로 배포하는 것을 알아볼 것이다.\n","excerpt":" hugo는 Go 언어로 만들어진 정적 사이트 생성기이다. 빌드시간이 빠르고 안정적인 특징을 갖고 있다.\n Hugo 블로그 만 …","ref":"/blog_2/hugo/hugo1_start/","title":"1. ubuntu 환경에서 Hugo 시작하기"},{"body":"file_content\n","excerpt":"file_content\n","ref":"/blog_2/en/hugo/example/","title":"file_title"},{"body":" 공식 문서를 보면 hugo로 만든 사이트를 배포하기 위해서는 github repository가 2개 필요하다. 하지만 github acion을 사용해 업로드를 자동화하면 repository 한개로 컨텐츠 업로드 부터 배포까지 할 수 있어 훨씬 효율적이다.\n Github Action 시작하기 github action은 repository에서 발생하는 이벤트를 처리할 수 있는 인터페이스를 제공한다. repository 별로 가상 서버를 제공하는데, 이 서버를 사용하려면 해당 repository에 대한 접근권한이 있어야 한다. 접근권한을 위해 필요한 것이 github access token이다.\n1. Github Token  내 github page setting -\u003e Developer settings -\u003e Personal access tokens 에서 -\u003e Create new token 선택    토큰을 생성하면 토큰 값이 나오는데 이 값을 꼭 복사해야한다.    토큰을 사용할 repository -\u003e setting -\u003e seeret -\u003e new secret-\u003e 만든 토큰 이름, 아까 저장한 토큰 값을 적어준다.   2. Github Action github action을 실행하는 방법은 레포지토리로 들어가서 상단에 있는 Action 버튼을 클릭한다.\n 그 다음 `Set up this workflow`를 클릭한 후 action을 작성하면 된다.  아래는 githup page 배포를 위한 github action을 작성한 것이다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  ``` # action 이름. 원하는대로 정하면 된다. name: hugo deploy1 # on: 뒤에오는 event가 발생하면 action이 실행된다. 아래는 master branch에 push 나 pull request가 발생하면 action이 실행되는 코드이다. 보통 그냥 두면 된다. on: push: branches: [ master ] pull_request: branches: [ master ] # jobs은 실행될 action을 포함하고 있다. jobs: build: # action은 github에서 제공하는 가상머신에서 실행되는데, runs-on은 가상머신의 환경이다. unbuntu로 되어있는 것을 그대로 두었다. runs-on: ubuntu-latest #steps는 명령어 들이다. # uses는 이미 만들어진 action을 사용하는 것, run은 명령어를 실행하는 것이다. steps: #1. 가상머신으로 checkout - uses: actions/checkout@v2 #2. theme를 submodule로 등록했는데 그것도 checkout - name: Checkout submodules shell: bash run: | auth_header=\"$(git config --local --get http.https://github.com/.extraheader)\" git submodule sync --recursive git -c \"http.extraheader=$auth_header\" -c protocol.version=2 submodule update --init --force --recursive --depth=1 # run 다음 내용들은 submodule을 최신으로 udapte한것을 가져오는 내용 + a이다. #3. npm install 사용하는 theme가 sass/scss를 사용하는 경우 node.js를 설치하고 npm install 과정이 필요하다. - name: npm install uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: '12' - run: npm install #4. Hugo 설치 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true #5. build (public 폴더에 저장 된다.) - name: Build Hugo Site run: | hugo --minify # minify는 압축시키는 것을 의미한다. #6.Deploy 배포: git token이 필요하다. gh-pages로 publish하는 것 잊지 말자 #public 폴더를 github page의 gh-pages 브챈치에 배포한다는 의미이다. - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.HUGO_TOKEN }}publish_branch: gh-pages publish_dir: ./public ```   github action을 통해 배포가 되었다면 https://깃헙아이디.github.io/레포이름/ 에서 본인 페이지를 확인 할 수 있을 것이다.\n이제 내용을 수정하고 git add . -\u003e git commit -m \"메세지내용\" -\u003e git push 과정만 거치면 자동으로 빌드와 배포가 된다! \n","excerpt":" 공식 문서를 보면 hugo로 만든 사이트를 배포하기 위해서는 github repository가 2개 필요하다. …","ref":"/blog_2/hugo/hugo2_gitaction/","title":"2. Github Action으로 블로그 자동 배포하기"},{"body":" 이전 포스트에서 테마를 기본테마인 ananke로 만들었다면 배포된 블로그를 볼 수 있을 것이다. 하지만 다른 theme를 사용한 경우라면 page가 생각한대로 나오지 않을 수 도 있고, 심지어는 페이지 자체가 나오지 않을 수 도 있다. 테마가 다른 경우는 각 테마의 설명을 보고 커스터마이징을 해야한다. 나의 경우 docsy 테마를 사용하였다.\n 이 포스팅은 DocsyDocument를 참고하여 작성하였다. 공식 문서에는 더욱 다양한 기능들이 있으니 참고해서 필요한 기능을 사용하면 된다.\n이 포스팅에서는 내가 추가한 기능만 정리해 두었다.\n1. Docsy 테마 설치하기 참고로 나의 경우 테마의 css를 변경할 것이기 때문에 theme github 주소를 그대로 clone 받지 않고 github 주소를 folk한 후 사용했다. 설치 방법은 Docsy사이트를 참조하였다.\n1) PostCSS 설치 PostCSS를 설치하기 위해서 Node.js가 설치되어 있어야 한다. 전역으로 설치 한 경우 PostCSS5.0.1 이상 버전은 로드되지 않기 때문에 로컬 설치를 사용해야한다. (autoprefixer 설치)\nsudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli  PostCss 설치시 발생 에러: Package.json 나의 경우 This utility will walk you through creating a package.json file. 라는 에러가 계속 발생했다. Package.json 파일을 만들어 주지 않았기 때문이다.  git init 코드를 친 후 프로젝트 내용에 대해 적어주자. 잘 모르겠으면 git init 후 엔터를 연달아 치면 package.json 파일이 만들어져 있는걸 볼 수 있다.\npackage.json이 설치 된 후에 다시 PostCss 설치를 하니 잘 작동했다.\n2) Docsy 테마 submodule에 추가 앞 포스팅과 내용이 같다. hugo site 제작 hugo new site 폴더명 -\u003e 만든 디렉토리로 이동 cd 폴더명 -\u003e git 초기화 git init -\u003e 서브모듈추가 git submodule add 깃헙주소 themes/테마이름 -\u003e config.toml 파일에 테마 추가 echo 'theme = \"테마이름\"' \u003e\u003e config.toml -\u003e 로컬로 구축시 필요한 코드 작성git submodule update --init --recursive\n정리하면 아래와 같다.\nhugo new site ceres_blog cd ceres_blog git init git submodule add 깃헙주소 themes/docsy echo 'theme = \"docsy\"' \u003e\u003e config.toml git submodule update --init --recursive 여기까지 한 후 hugo server로 로컬페이지를 보면 화면이 나오지 않는 경우도 있다. 이때는 npm install을 해주면 된다. docsy theme가 scss를 사용하기 때문에 npm install을 해야 작동이 된다.\n2. Docsy 테마 Contents DocsyDocument_Adding_Content를 참고하였다.\n1) archetypes 수정 docsy theme에 맞게 page의 front matter를 수정했다.\n--- title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} type: docs weight: 4 draft: false description: \u003e ---  title의 value인 {{ replace .Name \"-\" \" \" | title }}는 파일명을 타이틀로 쓴다는 의미이다. draft=false를 기본값으로 지정했다. draft: true 상태로 되어있는 경우, 해당 페이지는 화면에 나오지 않는다. 만약 draft: true인 상태로 페이지를 화면으로 보고 싶다면 hugo server -D를 사용해서 로컬서버에서 보면 된다. 페이지 정렬 순서는 “Weight”-\u003e “Date”-\u003e “LinkTitle” -\u003e “FilePath” 순이다. 만약 현재 포스팅을 상단에 위치라고 싶다면 weight: 1 을 입력하면 된다. docsy theme는 description 을 적을 수 있어서 archetypes에 추가해 주었다.  2) index page 생성 각 디렉토리의 index 페이지를 만들어 줄 수 있다. 각 디렉토리에 _index.md파일을 생성하면 된다.\n_index.md 파일의 내용이다. front matter 부분만 작성해주면 된다.\n--- title: \"Hugo로 블로그 만들기\" linkTitle: \"Hugo로 블로그 만들기\" type: docs weight: 4 description: \u003e hugo + github action 으로 github.io 페이지 만들기 --- 결과물을 보면 페이지 content에 본문이 나오는 것이 아니라 해당 디렉토리에 있는 파일 목록이 나온다.\n3. Docsy 테마 기능 추가 config.toml 파일에 내용을 추가하는 방법으로 진행된다.\n config 파일이란  일부 프로그램의 매개 변수 및 초기 설정을 구성하는 데 사용되는 파일이다. 사용자 응용 프로그램, 서버 프로세스 및 운영 체제 설정에 사용된다.\n 1) 다양한 언어 지원 Docsy 테마는 다양한 언어를 지원해준다. default 언어를 정하고 그 외의 다양한 언어를 추가할 수 있다. 나는 default 언어는 한국어로 선택하고 영어를 추가했다.\n  먼저 root/content 폴더 하위에 언어별 폴더를 만든다. 나의 경우 영어와 한국어를 추가했기 때문에 en, ko 폴더를 만들었다. content/en, content/ko 구조가 되는 것이다. 앞으로는 이 폴더 안에 컨텐츠를 만들어야 한다.\n  config.toml에 내용을 추가해준다.\n나는 default 언어를 한국어로 했다. 그 다음 각 언어별로 타이틀과 directory, time_format을 적어주면 된다.\n아래내용을 복붙하고 타이틀을 바꿔주면 될 것이다.\n  # Language settings: 한국으롤 default 값으로 했다. contentDir = \"content/ko\" defaultContentLanguage = \"ko\" defaultContentLanguageInSubdir = false # Useful when translating. enableMissingTranslationPlaceholders = true # Language configuration [languages.ko] title = \"한국어 버전 타이틀을 적어주자\" languageName =\"Korean\" contentDir = \"content/ko\" time_format_default = \"2006.01.02\" time_format_blog = \"2006.01.02\" # Weight used for sorting. weight = 1 [languages] [languages.en] title = \"영어버전 타이틀을 적어주자\" description = \"설명을 적어주자\" languageName =\"English\" contentDir = \"content/en\" time_format_default = \"02.01.2006\" time_format_blog = \"02.01.2006\" 2) Search 기능  위에서 언어별로 폴더를 만들었다. 각 언어 폴더 안에 search.md 파일을 만들어 준다. content/en/search.md content/ko/search.md  search.md 파일 내용은 아래처럼 작성해 주면 된다.\n--- title: Search Results layout: search --- search 기능은 2가지 방법이 있다. 나는 local search를 선택했다.  config.toml에 아래 내용을 추가 해주면 된다.\n# Enable Lunr.js offline search offlineSearch = true  gcs_engine_id 또는 Algolia DocSearch 내용이 config.toml에 있다면 지우거나 false 값을 줘야한다.  두 가지 방법을 다 입력해주면 충돌이 나기 때문이다.\n# Google Custom Search Engine ID. Remove or comment out to disable search. #gcs_engine_id = \"011737558837375720776:fsdu1nryfng\" # Enable Algolia DocSearch algolia_docsearch = false 3) 페이지 편집 오른쪽 side bar에 있는 기능이다. 페이지 편집을 누르면 해당 페이지를 수정할 수 있는 github 페이지가 열린다. config.toml 에 github_repo = \"레포지토리 주소\" 내용을 넣어주면 되지만 project_repo까지 적었다. 그대로 복붙헤서 레포지토리 주소만 바꾸면 된다.\n# Repository configuration (URLs for in-page links to opening issues and suggesting changes) github_repo = \"https://github.com/ceres1105/blog_2\" # An optional link to a related project repo. For example, the sibling repository where your product code lives. github_project_repo = \"https://github.com/ceres1105/blog_2\" 4) footer: 다양한 링크 추가 footer에 메일, 트위터, 스택오버플로우 등 다양한 링크를 추가할 수 있다. cofig.toml에 추가하면 된다. 아래 내용에서 사용 링크는 url 주소를 바꾸고, 사용하지 않을 링크는 #을 사용해서 주석처리를 하거나 지우면 된다.\n[params.links] # End user relevant links. These will show up on left side of footer and in the community page if you have one. [[params.links.user]] name = \"User mailing list\" url = \"https://example.org/mail\" icon = \"fa fa-envelope\" desc = \"Discussion and help from your fellow users\" [[params.links.user]] name =\"Twitter\" url = \"https://example.org/twitter\" icon = \"fab fa-twitter\" desc = \"Follow us on Twitter to get the latest news!\" [[params.links.user]] name = \"Stack Overflow\" url = \"https://example.org/stack\" icon = \"fab fa-stack-overflow\" desc = \"Practical questions and curated answers\" # Developer relevant links. These will show up on right side of footer and in the community page if you have one. [[params.links.developer]] name = \"GitHub\" url = \"https://github.com/google/docsy\" icon = \"fab fa-github\" desc = \"Development takes place here!\" [[params.links.developer]] name = \"Slack\" url = \"https://example.org/slack\" icon = \"fab fa-slack\" desc = \"Chat with other project developers\" [[params.links.developer]] name = \"Developer mailing list\" url = \"https://example.org/mail\" icon = \"fa fa-envelope\" desc = \"Discuss development issues around the project\" 5) Highlight 기능  Highlight를 넣고 싶은 문장 앞에 를 적어주고 문장 뒤에 를 적으면 된다.\n  예시) v 표시 한 곳만 highlight를 넣고 싶다면 아래처럼 코드를 짜면 된다.  [[params.links.user]] v name = \"User mailing list\" v url = \"https://example.org/mail\" icon = \"fa fa-envelope\" desc = \"Discussion and help from your fellow users\" [[params.links.user]] v name =\"Twitter\" v url = \"https://example.org/twitter\" icon = \"fab fa-twitter\" desc = \"Follow us on Twitter to get the latest news!\"  결과물  2-3, 7-8번 째 줄에 Highligt 가 된것을 볼 수 있다. 또 가장 윗 줄이 숫자 1번으로 시작한 것을 볼 수 있다.\n4. Docsy 테마 CSS 변경 Docsy 테마에만 적용되는 점은 아니다. 모든 테마에서 적용된다.\n가장 중요한 점은 theme 폴더를 직접 건드리지 않아야 한다. \ntheme폴더 내부의 docsy 폴더를 보면 css가 있는 폴더가 있을 것이다. 그 폴더를 root 폴더에 복사 한다.\n그렇게 되면 root 폴더에 있는 css 들이 우선순위를 갖게 된다. 바꾸고 싶은 css가 있다면 root 폴더에서 수정하면 된다.\n이론은 이러한데 직접해보니 모든 css 파일에 적용되진 않았다. default 색상, 크기, font 정도 수정이 가능했다.\n  자세한 예시\nscss 폴더는 root폴더\u003ethemes\u003edocsy\u003eassets\u003escss 이렇게 들어가면 된다. 나는 assets 폴더 전체를 root 에 복사하였다.\n여러 파일을 수정해본 결과 수정이 먹히는 파일은 _variables.scss 였다. 때문에 이 파일만 옮겨도 될 듯하다. _vairables.scss 파일에선 default 되어있는 color, font, size 등을 바꿀 수 있다.\n  font 를 바꿔보자\n_variables.scss 파일의 font 부분이다.\nhttps://fonts.google.com/ 사이트에서 font를 고르고 $google_font_name, $google_font_family 에서 font 이름만 바꿔주면 된다.\n하지만 ``` ``` 코드 내의 폰트 어떻게 바꿔야 할지 모르겠다. 여기에 한글을 적으면 약간 깨져 보이는 것 같은데 방법을 찾아봐야겠다.\n  5. Docsy 테마 Layout 변경 footer를 추가하거나 sidebar를 추가하는 등 layout을 수정했다.\nlayout도 css와 같다. root\u003etheme\u003edocsy\u003elayouts에서 필요한 부분만 root\u003elayouts에 복사하면 된다.\nroot\u003etheme\u003edocsy\u003elayouts 에서 _default폴더와 404.html,home.html 파일을 복사하고, 나머지는 필요한 부분만 복사하면 되는 듯 하다. 나는 sidebar 를 사용할거라 partials 폴더에서 section-index.html sidebar_tree.html 을 복사하였다.\n","excerpt":" 이전 포스트에서 테마를 기본테마인 ananke로 만들었다면 배포된 블로그를 볼 수 있을 것이다. 하지만 다른 theme를 사 …","ref":"/blog_2/hugo/hugo3_docsytheme/","title":"3. Docsy 테마 사용하기"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/hugo/","title":"Hugo로 블로그 만들기"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/en/hugo/","title":"index_title"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/","title":"Contents"},{"body":"This is a placeholder page that shows you how to use this template site.\n -- ","excerpt":"This is a placeholder page that shows you how to use this template …","ref":"/blog_2/en/","title":"Contents"},{"body":"","excerpt":"","ref":"/blog_2/en/index.json","title":""},{"body":"","excerpt":"","ref":"/blog_2/index.json","title":""},{"body":"","excerpt":"","ref":"/blog_2/categories/","title":"Categories"},{"body":"","excerpt":"","ref":"/blog_2/tags/","title":"Tags"}]